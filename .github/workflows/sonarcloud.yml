name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      
      - uses: actions/checkout@v4

      - name: Set Solution Path
        id: set_solution_path
        shell: pwsh # Explicitly set shell to PowerShell (default on Windows)
        run: |
            # Set the path to the solution file here
            $SOLUTION_PATH = "./SnackTech.Vidsnap.sln"
            echo "SOLUTION_PATH=$SOLUTION_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore dependencies
        shell: pwsh # Explicitly set shell to PowerShell
        run: dotnet restore $env:SOLUTION_PATH

      - name: Build
        shell: pwsh # Explicitly set shell to PowerShell
        run: dotnet build $env:SOLUTION_PATH --configuration Release --no-restore

      - name: Test
        shell: pwsh # Explicitly set shell to PowerShell
        run: dotnet test $env:SOLUTION_PATH --configuration Release --no-build --collect:"XPlat Code Coverage" --logger:"trx;LogFileName=..\TestResults.trx" # Using backslash for Windows path
      
      - name: Install ReportGenerator and dotnet-coverage
        shell: pwsh # Explicitly set shell to PowerShell
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-coverage
          
      - name: Merge Test Results
        shell: pwsh # Explicitly set shell to PowerShell
        run: |
          dotnet-coverage merge *.cobertura.xml --recursive --output merged.cobertura.xml --output-format cobertura
  
      - name: Generate Coverage Report
        shell: pwsh # Explicitly set shell to PowerShell
        run: reportgenerator -reports:./**/merged.cobertura.xml -targetdir:./CoverageReport -reporttypes:Html
  
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache # No Windows, o ~ pode ser problemático às vezes. Considerar $HOME ou $USERPROFILE se houver problemas.
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Begin SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Necessário para análise de PRs
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"SnackTechTeam_snacktech-vidsnap-api" /o:"snacktechteam" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.cobertura.reportPaths="merged.cobertura.xml" ` # <-- Adicionado para indicar o relatório
            /d:sonar.pullrequest.provider="github" `
            /d:sonar.pullrequest.github.repository="${{ github.repository }}" `
            /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" `
            /d:sonar.pullrequest.branch="${{ github.event.pull_request.head.ref }}" `
            /d:sonar.pullrequest.base="${{ github.event.pull_request.base.ref }}"

      # Removido o 'dotnet build' daqui, pois já foi feito antes dos testes

      - name: End SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"