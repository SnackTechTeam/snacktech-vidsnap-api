name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request: 
    branches: [ "main" ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Define a variavel de sessÃ£o para o arquivo da solution
    - name: Set Solution Path
      id: set_solution_path
      run: |
        # Informar aqui o caminho para o arquivo da solution
        SOLUTION_PATH="./SnackTech.Vidsnap.sln"
        echo "SOLUTION_PATH=$SOLUTION_PATH" >> $GITHUB_ENV

    - name: Restore dependencies
      run: dotnet restore $SOLUTION_PATH

    - name: Build
      run: dotnet build $SOLUTION_PATH --configuration Release

    - name: Test
      run: dotnet test $SOLUTION_PATH --configuration Release --collect:"XPlat Code Coverage" --logger:"trx;LogFileName=../TestResults.trx"

    - name: Install ReportGenerator and dotnet-coverage
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        dotnet tool install -g dotnet-coverage
        
    - name: Merge Test Results
      run: |
        dotnet-coverage merge *.cobertura.xml --recursive --output merged.cobertura.xml --output-format cobertura

    - name: Generate Coverage Report
      run: reportgenerator -reports:./**/merged.cobertura.xml -targetdir:./CoverageReport -reporttypes:Html

    - name: Extract Coverage Percentage
      id: coverage
      run: |
        # Install xmllint if not already installed
        sudo apt-get update
        sudo apt-get install -y libxml2-utils bc

        # Find the coverage file
        coverage_file=$(find . -name "merged.cobertura.xml" -type f -print -quit)
        if [ -z "$coverage_file" ]; then
          echo "Coverage file not found!"
          exit 1
        fi
        echo "Coverage file found: $coverage_file"

        # Extract the 'line-rate' attribute from the root <coverage> element
        coverage_percentage=$(xmllint --xpath "string(/coverage/@line-rate)" "$coverage_file")
        if [ -z "$coverage_percentage" ]; then
          echo "Failed to extract coverage percentage!"
          exit 1
        fi
        echo "Raw Coverage Percentage: $coverage_percentage"
        coverage_percentage=$(echo "$coverage_percentage * 100" | bc -l)
        coverage_percentage=$(printf "%.2f" "$coverage_percentage")
        echo "Coverage Percentage: $coverage_percentage%"
        echo "coverage_percentage=$coverage_percentage" >> $GITHUB_OUTPUT

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReport
        path: ./CoverageReport    
    
    - name: Print Coverage Percentage and validate minimum coverage
      run: |
        echo "Coverage Percentage: ${{ steps.coverage.outputs.coverage_percentage }}%"

        # if [[ $(bc <<< "${{ steps.coverage.outputs.coverage_percentage }} < 70") -eq 1 ]]; then
        #   echo "Coverage percentage is less than 0%!"
        #   exit 1
        # fi
        
  deploy-api:
    name: API Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SECRET_ACCESS_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.VIDEOS_API_ECR_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f src/Driving/Vidsnap.Api/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG src
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure Kubectl
        run: |
          aws eks --region ${{ vars.AWS_REGION }} update-kubeconfig --name ${{ vars.PROJECT_NAME }}
      
      - name: Create/Update ConfigMap API Videos
        env:
          BUCKET: ${{ vars.VIDEOS_BUCKET_NAME }}
          TIMEOUT_DEFAULT: 5 
        run: |
          CONFIGMAP_NAME="api-videos-configmap"
      
          if kubectl get configmap "$CONFIGMAP_NAME"  > /dev/null 2>&1; then
            kubectl delete configmap "$CONFIGMAP_NAME" 
          fi
      
          kubectl create configmap "$CONFIGMAP_NAME" \
            --from-literal=bucket-name="${{ env.BUCKET }}" \
            --from-literal=timeout-default="${{ env.TIMEOUT_DEFAULT }}"
            
      - name: Replace ECR image string value
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          yq e '.spec.template.spec.containers[0].image = "'"$IMAGE_URI"'"' -i infra/k8s/api/01-api-deployment.yaml || { echo "Error updating ecr_image_url_repo_tag value"; exit 1; }
      
      - name: Deploy to EKS
        run: |
          kubectl apply -f infra/k8s/api


  deploy-worker-status:
    name: Worker Status Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SECRET_ACCESS_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.VIDEOS_WORKER_STATUS_ECR_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f src/Driving/Vidsnap.Worker.AtualizaStatus/Vidsnap.Worker.AtualizaStatusProcessamento/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG src
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure Kubectl
        run: |
          aws eks --region ${{ vars.AWS_REGION }} update-kubeconfig --name ${{ vars.PROJECT_NAME }}
      
      - name: Create/Update ConfigMap Worker Status Videos
        env:
          MAX_MESSAGES: 5 
        run: |
          CONFIGMAP_NAME="worker-videos-status-configmap"
      
          if kubectl get configmap "$CONFIGMAP_NAME"  > /dev/null 2>&1; then
            kubectl delete configmap "$CONFIGMAP_NAME" 
          fi
      
          kubectl create configmap "$CONFIGMAP_NAME" \
            --from-literal=max-messages-limit="${{ env.MAX_MESSAGES }}" 
            
      - name: Replace ECR image string value
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          yq e '.spec.template.spec.containers[0].image = "'"$IMAGE_URI"'"' -i infra/k8s/worker/01-worker-deployment.yaml || { echo "Error updating ecr_image_url_repo_tag value"; exit 1; }
      
      - name: Replace queueName and awsRegion in infra/k8s/03-keda-scale.yaml
        run: |
          yq e '.spec.triggers[0].metadata.queueName = "'"${{ vars.VIDEOS_STATUS_SQS_NAME }}"'"' -i infra/k8s/worker/03-keda-scale.yaml || { echo "Error updating queueName"; exit 1; }
          yq e '.spec.triggers[0].metadata.awsRegion = "'"${{ vars.AWS_REGION }}"'"' -i infra/k8s/worker/03-keda-scale.yaml || { echo "Error updating awsRegion"; exit 1; } 
      
      
      - name: Deploy to EKS
        run: |
          kubectl apply -f infra/k8s/worker